#!/bin/bash -ex

NAME="${0##*/}"

export PATH=/var/vcap/packages/flanneld/:$PATH

RUN_DIR=/var/vcap/sys/run/flanneld
PIDFILE=$RUN_DIR/flanneld.pid
LOG_DIR=/var/vcap/sys/log/flanneld

# shellcheck disable=SC1091
. /var/vcap/packages/pid_utils/pid_utils.sh

setup_directories() {
  mkdir -p "$RUN_DIR" "$LOG_DIR"
  chown -R vcap:vcap "$RUN_DIR" "$LOG_DIR"
}

send_process_stdout_to_logfile() {
  exec 1>> "$LOG_DIR/$NAME.stdout.log"
}

send_process_stderr_to_logfile() {
  exec 2>> "$LOG_DIR/$NAME.stderr.log"
}

start_flanneld() {
  if [ -e /var/vcap/jobs/cloud-provider/bin/cloud-provider_utils ]; then
    . /var/vcap/jobs/cloud-provider/bin/cloud-provider_utils
    set_cloud_provider
    cloud_config="/var/vcap/jobs/cloud-provider/config/cloud-provider.ini"
  else
    cloud_provider=""
    cloud_config=""
  fi

  if [ "gce" == "$cloud_provider" ]; then
    hostname_override=$(curl http://metadata.google.internal/computeMetadata/v1/instance/name -H "Metadata-Flavor: Google")
  else
    hostname_override=<%= spec.ip %>
  fi

  modprobe br_netfilter

  mkdir -p /dev/net
  mknod /dev/net/tun c 10 200 || true
  echo 1 > /proc/sys/net/ipv4/ip_forward

  mkdir -p /etc/cni/net.d /etc/kube-flannel
  cp /var/vcap/jobs/flanneld/config/cni-conf.json /etc/cni/net.d/10-flannel.conf
  cp /var/vcap/jobs/flanneld/config/net-conf.json /etc/kube-flannel/net-conf.json

  export NODE_NAME="$hostname_override"

  <% if link('kubernetes-api').p('authorization-mode').downcase == 'rbac' %>
  kubectl="/var/vcap/packages/kubernetes/bin/kubectl --token '<%= link('kubernetes-api').p('admin-password') %>'"
  ${kubectl} apply -f /var/vcap/jobs/flanneld/config/flanneld-rbac-policy.yml
  <% end %>

  flanneld -kube-subnet-mgr=true -kube-api-url=https://master.kubo:8443 -kubeconfig-file=/var/vcap/jobs/flanneld/config/kubeconfig \
    1>> $LOG_DIR/flanneld.stdout.log \
    2>> $LOG_DIR/flanneld.stderr.log
}

stop_flanneld() {
  kill_and_wait "$PIDFILE"
}

pid() {
  head -1 "$PIDFILE"
}

stop_associated_logging_processes() {
  # shellcheck disable=SC2046
  pkill -g $(get_group_pid)
}

get_group_pid() {
  ps -ho pgrp "$(pid)"
}

case $1 in

  start)
    setup_directories
    send_process_stdout_to_logfile
    send_process_stderr_to_logfile

    pid_guard "$PIDFILE" "Flanneld"

    echo $$ > $PIDFILE
    start_flanneld
    ;;

  stop)
    stop_associated_logging_processes
    stop_flanneld
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    ;;

esac
